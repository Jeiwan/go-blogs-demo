swagger: "2.0"
info:
  version: "1.0.0"
  description: |-
    An example multi-tenancy application in Golang.

    Usage:
    ```
    docker-compose up
    go run main.go ui
    ```
  title: Blogs
host: localhost:3000
schemes:
  - http
tags:
  - name: blog
paths:
  /blog:
    post:
      summary: Create a new blog
      tags:
        - blog
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: blog
          description: Blog name and password.
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                type: string
              password:
                type: string
      responses:
        "200":
          description: success
        "401":
          description: bad request
          schema:
            $ref: '#/definitions/Error'

  /blog/{blog_name}:
    get:
      summary: View posts in a blog
      tags:
        - blog
      consumes:
        - application/json
      parameters:
        - name: blog_name
          in: path
          required: true
          type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/Posts'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/Error'

  /blog/{blog_name}/posts:
    post:
      summary: Publish a post to a blog
      tags:
        - blog
      security:
        - create_post_auth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: blog_name
          in: path
          required: true
          type: string
        # - name: authorization
        #   in: header
        #   required: true
        #   type: string
        - name: post
          in: body
          required: true
          schema:
            type: object
            required:
              - post
            properties:
              post:
                type: string
                description: Post content
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              post_id:
                type: integer
        "401":
          description: bad request
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/Error'

definitions:
  Post:
    type: object
    properties:
      date:
        type: string
      post:
        type: string
  Posts:
    type: object
    properties:
      posts:
        type: array
        items:
          $ref: '#/definitions/Post'
  Error:
    type: object
    properties:
      error:
        type: string

securityDefinitions:
  create_post_auth:
    type: "basic"